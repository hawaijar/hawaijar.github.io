{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/i-learn-today-31-Dec-2020","result":{"data":{"markdownRemark":{"id":"05112877-243d-5af4-8880-9f6ee8772f48","html":"<p><em>Disclaimer</em>: I don‚Äôt have the energy to explain in length these topics. They are the most boring things, at least to me, to spend a day. Given a couple of references below. There‚Äôs a lot out there that explains with a lot of fiery energy (including a video) on the net. In this topic, however, I would like to point one thing in particular that I learn it today - <em>Job Queue</em></p>\n<h2 id=\"what-is-an-event-loop\" style=\"position:relative;\"><a href=\"#what-is-an-event-loop\" aria-label=\"what is an event loop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is an Event Loop?</h2>\n<p>To me, I imagine this way - for every javascript file, <strong>in the end</strong>, there‚Äôs an invisible <em>while loop</em> sitting there to check whether some events had happened and invoke them if that occurred, otherwise exit the loop and terminate the program.</p>\n<p>Sounds confusing? Here is a rough idea -</p>\n<p>Imagine we have written the world‚Äôs best <strong>main.js</strong> file as shown below -</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here‚Äôs what I imagine a Node (or browser) does in this file. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// your code</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token operator\">...</span>\n<span class=\"token comment\">// last line of your code - line: 1000</span>\n<span class=\"token comment\">// below is the event-loop inserted by the platform - node/browser</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>is there any events pending <span class=\"token keyword\">in</span> the message queue <span class=\"token constant\">OR</span> job queue<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tpush them into the call stacks\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// program.exit(0);</span></code></pre></div>\n<p>I know that‚Äôs the most simplified (or stupid?) way of looking at it but that‚Äôs how I create a mental model of Event Loop ü§∑</p>\n<p>Okay, what‚Äôs that mean in general? Well, for every function calls, we push them in the Stack. And so long as something is running in the Stack (meaning, there‚Äôre at least one function calls), the event loop can‚Äôt do anything. </p>\n<p>The control reaches the above <em>invisible</em> while loop only when your program passes line no. 1000. If there‚Äôs any long time-consuming CPU/bound processing going on in your code (e.g infinite while loop, calculating Fibonacci w/o using memoization, calculating the age of the universe, finding alien traces in Mars, etc..), the control will delay reaching the event loop, thereby freezing any external asynchronous tasks (mouse events, timers, I/O operations) to execute their handlers. </p>\n<p>What‚Äôs that mean in practice? It means, if that happens in your browser, you can‚Äôt see the actual content of your page no matter how hard you try! If you‚Äôre using Chrome, you might notice sometime a pop-up window showing something like below. That‚Äôs the sign of the presence of long-running JS code in the Stack.</p>\n<p><img src=\"https://arnaudbuchholz.github.io/blog/post/Timeout%20and%20WebWorker/Chrome%20long%20running%20script.png\" alt=\"long running script in Chrome\"></p>\n<p>When your code runs, it runs along with the so-called Event Loop and they‚Äôre running in the same single thread. Your code may invoke async operations but it won‚Äôt go/jump to their handlers right away because they‚Äôre handled in separate data-structures (different from Stack) in either <strong>Message Queue</strong> or <strong>Job Queue</strong>. But your code runs line after line no matter whether a line is invoking async operations or not. When it comes across async operations (like <em>setTimer</em>, <em>Promises</em>, IO/operations), it just delegates (to respective handlers - Web APIs) and continues execution of the main flow (your JS code). </p>\n<blockquote>\n<p>Let‚Äôs cut the long story to the short.</p>\n</blockquote>\n<p>In the beginning, there was only <strong>Message Queue</strong> to handle Async/operations (UI events - onClick, onLoad, setTimer(), setInterval(), I/O in case of Node). </p>\n<p>Here‚Äôs a simplified code -</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimer</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Program pretends to end here\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimer</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And here‚Äôs the result of the program -</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Main script\nProgram pretends to end here\nI&#39;m foo\nI&#39;m bar</code></pre></div>\n<p>It runs line by line starting from the first line.</p>\n<ul>\n<li>First, - it defines a function variable called ‚Äúfoo‚Äù (first pass of JS parsing) - we‚Äôre not executing in the first pass.</li>\n<li>Next it defines another function variable called ‚Äúbar‚Äù. These are the scope variables of the global context.</li>\n<li>There are no variables define after that. So, the second pass of JS (Execution stage) starts.</li>\n<li>Starting with console.log, printing <strong>Main script</strong>.</li>\n<li>Next it registers (or delegates) invocation of setTimeout() to Web-APIs/handlers.</li>\n<li>Next, another console.log, printing <strong>Program pretends to end here</strong>.</li>\n<li>Finally, register another setTimeout() to Web-Apis.\n‚Ä¶\n‚Ä¶</li>\n<li>Then we hit the invisible Event loop (while loop). Since the setTimeOuts() are registered at 0ms, they‚Äôll immediately timeout and return one by one in the message queue (following FIFO).</li>\n<li>Since, the call stack is empty now, EL (Event Loop, hereafter) pushed the ‚Äòfoo‚Äô function on the Stack, and on executing prints out <strong>I‚Äôm foo</strong>. </li>\n<li>The same happens for bar and printing <strong>I‚Äôm bar</strong> respectively.</li>\n</ul>\n<h2 id=\"is-that-all\" style=\"position:relative;\"><a href=\"#is-that-all\" aria-label=\"is that all permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Is that all?</h2>\n<p>Not yet but we‚Äôre very close to the end.</p>\n<p>I said earlier, <strong>in the beginning</strong> because we have another one to discuss further - <em>Job Queue</em></p>\n<p>With the introduction of <strong>Promises</strong> in the <em>EcmaScript 2015 aka ES6</em>, we have an efficient way of handling async/operations.\nIn the above, traditional way of handling async/ops using <em>setTimeout()</em>, <em>UI Events</em> etc, EL can‚Äôt push any <em>tasks</em> in the <em>Message Queue</em> unless anything is remaining in the Stack. </p>\n<p><em>Note</em>: <em>Task</em> refers to the fulfilled events waiting in the <em>Message Queue</em> to be picked up by EL.</p>\n<p>However, in the case of <em>Promises</em>, they‚Äôre waiting in another data structure called <em>Job Queue</em> or <em>Micro-task Queue</em>. In this case, EL can preempt function invocations in the Stack if there are any fulfilled Promises waiting in the <em>Job Queue</em>. That means, after every running any function (when it‚Äôs popped from the Stack), EL checks if there‚Äôs fulfilled <em>promises</em> (in <em>Job Queue</em>) and pick those and push to the Stack for their execution. What‚Äôs that mean? It means, EL doesn‚Äôt need to wait for all functions in the Stack to complete, it can preempt running the next function in the Stack if any Promises is waiting in the <em>Job Queue</em>.</p>\n<p>Let‚Äôs check with an example -</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After bar() before foo()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here‚Äôs the result after running the above code -</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Main script\nI&#39;m bar\nAfter bar() before foo()\nI&#39;m foo</code></pre></div>\n<p>Let‚Äôs go line by line of the code -</p>\n<ul>\n<li>First, - it defines a function variable called ‚Äúfoo‚Äù.</li>\n<li>Second,- it defines another function variable called ‚Äúbar‚Äù. </li>\n<li>There are no variables define after that. So, the second pass of JS (Execution stage) starts.</li>\n<li>Starting with console.log, printing <strong>Main script</strong>.</li>\n<li>Next it registers (or delegates) invocation of setTimeout() to Web-APIs/handlers.</li>\n<li><strong>Next</strong> it registers/invokes a new Promise operation and when done it‚Äôll be available in the <em>Job Queue</em></li>\n<li><em>Next</em>, we invoked bar() and prints out <strong>I‚Äôm bar</strong></li>\n<li><em>After bar() has been executed, EL checks whether there‚Äôs any fulfilled promise(s) in the _Job Queue</em> and found one there.\nIt pushes its handler to the Stack and prints out <strong>After bar() before foo()</strong>_\n‚Ä¶\n‚Ä¶</li>\n<li>Then the setTimeOuts() expires and pushes to the message queue (following FIFO).</li>\n<li>Since, the call stack is empty now, EL (Event Loop, hereafter) pushed the ‚Äòfoo‚Äô function on the Stack, and on executing prints out <strong>I‚Äôm foo</strong>. </li>\n</ul>\n<p><em>Whew.. that‚Äôs too long but I feel I‚Äôm just scratching the details without actually going deeper into it. And I‚Äôm sure I won‚Äôt be doing that in the future</em> üò¨ <em>. Below are a few references if you want to swim deeper into the ocean</em>.</p>\n<p><strong>References</strong></p>\n<ul>\n<li><a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a></li>\n<li><a href=\"https://flaviocopes.com/javascript-event-loop/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://flaviocopes.com/javascript-event-loop/</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.youtube.com/watch?v=8aGhZQkoFbQ</a></li>\n</ul>","fields":{"slug":"/posts/i-learn-today-31-Dec-2020","tagSlugs":["/tag/node/","/tag/javascript/"]},"frontmatter":{"date":"2020-12-31T06:09:25.475Z","description":"Understanding Event Loop, Message Queue, Job Queue","tags":["Node","Javascript"],"title":"I learn today - Event Loop, Message Queue, Job Queue","socialImage":null}}},"pageContext":{"slug":"/posts/i-learn-today-31-Dec-2020"}}}