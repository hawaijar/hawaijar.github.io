{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/i-learn-today-22-Dec-2020","result":{"data":{"markdownRemark":{"id":"57159e30-1168-5dde-808f-8285219f4fe3","html":"<h2 id=\"what-is-a-proxy-pattern\" style=\"position:relative;\"><a href=\"#what-is-a-proxy-pattern\" aria-label=\"what is a proxy pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WHAT IS A PROXY PATTERN?</h2>\n<p>  To me, it’s a way of controlling access to a target object. </p>\n<p>  Let’s see with an example -</p>\n<p>  Say, we have a class Account as follow -</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> balance<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">credit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    balance <span class=\"token operator\">+=</span> amount<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">debit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    balance <span class=\"token operator\">-=</span> amount<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>  One problem with the above <em>debit()</em> is that we don’t want to debit if there’s no sufficient fund available. So we need a way to avoid direct access to these methods (credit &#x26; debit). One way is to create a mediator that checks these things and that’s where the <em>proxy pattern</em> comes into play.</p>\n<p>  Here is the mediator class -</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountProxy</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Account</span> account <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">credit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    account<span class=\"token punctuation\">.</span>balance <span class=\"token operator\">+=</span> amount<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">debit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">.</span>balance <span class=\"token operator\">&lt;</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Insufficient fund to withdraw\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      account<span class=\"token punctuation\">.</span>balance <span class=\"token operator\">-=</span> amount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>  And here is the client code -</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">AccountProxy</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AccountProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  p<span class=\"token punctuation\">.</span><span class=\"token function\">credit</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  p<span class=\"token punctuation\">.</span><span class=\"token function\">debit</span><span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// here, it'll throw an exception</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"how-does-these-relate-to-collectionscheckedlist\" style=\"position:relative;\"><a href=\"#how-does-these-relate-to-collectionscheckedlist\" aria-label=\"how does these relate to collectionscheckedlist permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How does these relate to <em>Collections.checkedList</em>?</h3>\n<p>Let’s take an example and try to co-relate with the above Account example.</p>\n<p>Say, we have our code like this -</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FloristTest</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Florist</span> jane <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Florist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> flowers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tjane<span class=\"token punctuation\">.</span><span class=\"token function\">addFlowers</span><span class=\"token punctuation\">(</span>flowers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> flower<span class=\"token operator\">:</span> flowers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>flower<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the above, we want to buy flowers from <em>Jane</em>, asking her to get some flowers. However, by mistake, she slip her 5 cents in the flower pot as shown below -</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Florist</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span> flowers<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addFlowers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span> flowers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tflowers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alyssa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tflowers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Erica\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tflowers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Daisy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tflowers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// invalid data!</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When we run our code (FloristTest.java), here’s what is throwing an exception. Unfortunately, the exception is pointing at our code and that’s not the case.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Exception in thread &quot;main&quot; java.lang.ClassCastException: class java.lang.Integer cannot be cast to class java.lang.String (java.lang.Integer and java.lang.String are in module java.base of loader &#39;bootstrap&#39;)\n\tat hawaijar.collections.FloristTest.main(FloristTest.java:10)</code></pre></div>\n<p>The point is that, though we defined our flowers as <em>List<String> flowers</em>, there’s no way for the compiler to check the <em>unchecked list</em> in the <em>addFlowers()</em> because that’s also valid syntax!</p>\n<p>Imagine we’re invoking hundreds of other third-party code and if they’re using <em>unchecked list</em>, where anything (of Object type) is allowed to add, we’ll have a problem in using those lists returned from them. And worse, finding from where the exception is causing would be a nightmare.</p>\n<p>To help finding where the exception is throwing, just like our <em>Account Proxy</em> whose sole purpose is to throw an exception when something unintended happen, Java API introduced <em>Collections.checkedXXX</em> methods where <em>XXX</em> could be of various collection types. In our case, we will be using <em>Collections.checkedList()</em> to see how it finds out the right spot of the error.</p>\n<p>Here’s the updated class -</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Florist</span> jane <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Florist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> flowers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tflowers <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkedList</span><span class=\"token punctuation\">(</span>flowers<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tjane<span class=\"token punctuation\">.</span><span class=\"token function\">addFlowers</span><span class=\"token punctuation\">(</span>flowers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> flower<span class=\"token operator\">:</span> flowers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>flower<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>  When running the programs, we’ll see where the problem occurs as shown below -</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Exception in thread &quot;main&quot; java.lang.ClassCastException: Attempt to insert class java.lang.Integer element into collection with element type class java.lang.String\n\tat java.base/java.util.Collections$CheckedCollection.typeCheck(Collections.java:3097)\n\tat java.base/java.util.Collections$CheckedCollection.add(Collections.java:3145)\n\tat hawaijar.collections.Florist.addFlowers(Florist.java:12)\n\tat hawaijar.collections.FloristTest.main(FloristTest.java:10)</code></pre></div>\n<p>  See those two things -</p>\n<ol>\n<li>Exception in thread “main” java.lang.ClassCastException: Attempt to insert class java.lang.Integer element into collection with element type class java.lang.String</li>\n<li>at hawaijar.collections.Florist.addFlowers(Florist.java:12)</li>\n</ol>\n<p>  So, here the <em>Collections.checkedList()</em> is nothing more than a (run-time) proxy that checks if there’s any unintended operations happen and finds where it happens when such an event occurs. </p>\n<p>  During development time, we can insert that one line <code class=\"language-text\">flowers = Collections.checkedList(flowers, String.class);</code> and once everything is clear of any exceptions, we can remove them before pushing the code to production. It’s mentioned that there’s a cost (slight) involve in using this check method and so it’s better to comment out (or remove) before we move (our code) to production.\n</p>","fields":{"slug":"/posts/i-learn-today-22-Dec-2020","tagSlugs":["/tag/java/","/tag/core-java/","/tag/language/"]},"frontmatter":{"date":"2020-12-22T06:11:49.475Z","description":"An application of Proxy Pattern in Java language","tags":["Java","Core Java","Language"],"title":"I learn today - Collections.checkedList","socialImage":null}}},"pageContext":{"slug":"/posts/i-learn-today-22-Dec-2020"}}}