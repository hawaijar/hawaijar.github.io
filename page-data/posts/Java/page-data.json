{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/Java","result":{"data":{"markdownRemark":{"id":"28ac6ed2-3e07-5fe6-969e-a828e73a6016","html":"<h2 id=\"item-1-package-names-are-like-family-names\" style=\"position:relative;\"><a href=\"#item-1-package-names-are-like-family-names\" aria-label=\"item 1 package names are like family names permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ITEM 1: PACKAGE NAMES ARE LIKE FAMILY NAMES</h2>\n<p>  In Java, we arrange (or rather, group) files (source code) based on their common functionality, characteristics, or behaviors. Say, if we have Rose, Lily, Lavenders, etc, we would rather group them in a <strong>flower</strong> category. Similarly, we will put Dog, Cat, Horse in an <strong>animal</strong> category.</p>\n<p>  In Java, source files are commonly (and recommended) to organize based on what functionality they’re doing. We have <strong>java.util.function</strong> package containing all the classes (and interfaces) related to functional interface, for example.</p>\n<p>  Within a package, each class can refer to the other classes without using the package name. It is like calling our family members by their first name say, <strong>John</strong>. However, if our John is in the public, there might be some other John(s) like <strong>John Wick</strong>, <strong>John Woo</strong>, <strong>John carpenter</strong> etc. and therefore he would be better call out (outside the family) as <strong>John Hawaijar</strong>, where <strong>Hawaijar</strong> being the last name (family name)</p>\n<p>  Ironically, if we invite <strong>John Wick</strong> to a family dinner, we would call him as simply <strong>John</strong> and not <strong>John Wick</strong> because we know he is John Wick (<em>Off course, we have to be sure of our facial gesture (and direction) when we call out John as we have our John too in the family!</em>)</p>\n<p>  The way of inviting another person in the family and called by their first name is what the <strong>import</strong> statement is doing in Java.</p>\n<p>  When we say, </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n  <span class=\"token class-name\">List</span> people <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John Wick\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"John Doe\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"John Hawaijar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>  We are inviting other classes in our class file and we don’t need to use their fully qualified names.</p>\n<p>  However, without importing the packages, we have to use the fully qualified name of those classes (just like we have to use a person’s full name - first name, last name, in the public to avoid name conflicts) as shown below -</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\njava<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span><span class=\"token class-name\">List</span> people <span class=\"token operator\">=</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John Wick\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"John Doe\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"John Hawaijar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"which-one-is-better\" style=\"position:relative;\"><a href=\"#which-one-is-better\" aria-label=\"which one is better permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Which one is better?</h4>\n<p>  In most of the cases, we import packages and used their class names (as in the first example) because that makes the code clean and legible.</p>\n<p> <em>Note</em>: <em>I want to credit the title of this section to <strong>Simon Roberts</strong> as I run into this amazing metaphor when he talked about the package topic in his O’Reilly OCP course <a href=\"https://learning.oreilly.com/learning-paths/learning-path-oca/9780135944844/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://learning.oreilly.com/learning-paths/learning-path-oca/9780135944844/</a></em></p>","fields":{"slug":"/posts/Java","tagSlugs":["/tag/java/","/tag/core-java/","/tag/language/"]},"frontmatter":{"date":"2020-12-21T23:46:37.121Z","description":"Learning again the most confusing parts of Java, one step at a time - Scope, Package","tags":["Java","Core Java","Language"],"title":"Rambling about Java - Part I","socialImage":"/media/heap.jpg"}}},"pageContext":{"slug":"/posts/Java"}}}