<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog by Hawaijar]]></title><description><![CDATA[Personal blogs of Hawaijar]]></description><link>https://lumen.netlify.com</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 22 Dec 2020 05:51:06 GMT</lastBuildDate><item><title><![CDATA[I learn today - Collections.checkedList]]></title><description><![CDATA[An application of Proxy Pattern in Java language]]></description><link>https://lumen.netlify.com/posts/i-learn-today-22-Dec-2020</link><guid isPermaLink="false">https://lumen.netlify.com/posts/i-learn-today-22-Dec-2020</guid><pubDate>Tue, 22 Dec 2020 23:46:37 GMT</pubDate><content:encoded>&lt;h2 id=&quot;what-is-a-proxy-pattern&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#what-is-a-proxy-pattern&quot; aria-label=&quot;what is a proxy pattern permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;WHAT IS A PROXY PATTERN?&lt;/h2&gt;
&lt;p&gt;  To me, it’s a way of controlling access to a target object. &lt;/p&gt;
&lt;p&gt;  Let’s see with an example -&lt;/p&gt;
&lt;p&gt;  Say, we have a class Account as follow -&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; balance&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;credit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; amount&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    balance &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; amount&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;debit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; amount&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    balance &lt;span class=&quot;token operator&quot;&gt;-=&lt;/span&gt; amount&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  One problem with the above &lt;em&gt;debit()&lt;/em&gt; is that we don’t want to debit if there’s no sufficient fund available. So we need a way to avoid direct access to these methods (credit &amp;#x26; debit). One way is to create a mediator that checks these things and that’s where the &lt;em&gt;proxy pattern&lt;/em&gt; comes into play.&lt;/p&gt;
&lt;p&gt;  Here is the mediator class -&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AccountProxy&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Account&lt;/span&gt; account &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;credit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; amount&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    account&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;balance &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; amount&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;debit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; amount&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;account&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;balance &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; amount&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Insufficient fund to withdraw&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      account&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;balance &lt;span class=&quot;token operator&quot;&gt;-=&lt;/span&gt; amount&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  And here is the client code -&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;AccountProxy&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AccountProxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;credit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;debit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// here, it&apos;ll throw an exception&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;how-does-these-relate-to-collectionscheckedlist&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-does-these-relate-to-collectionscheckedlist&quot; aria-label=&quot;how does these relate to collectionscheckedlist permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How does these relate to &lt;em&gt;Collections.checkedList&lt;/em&gt;?&lt;/h3&gt;
&lt;p&gt;Let’s take an example and try to co-relate with the above Account example.&lt;/p&gt;
&lt;p&gt;Say, we have our code like this -&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FloristTest&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;Florist&lt;/span&gt; jane &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Florist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; flowers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		jane&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addFlowers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flowers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; flower&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; flowers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flower&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the above, we want to buy flowers from &lt;em&gt;Jane&lt;/em&gt;, asking her to get some flowers. However, by mistake, she slip her 5 cents in the flower pot as shown below -&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Florist&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt; flowers&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;addFlowers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt; flowers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		flowers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Alyssa&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		flowers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Erica&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		flowers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Daisy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		flowers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// invalid data!&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we run our code (FloristTest.java), here’s what is throwing an exception. Unfortunately, the exception is pointing at our code and that’s not the case.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Exception in thread &amp;quot;main&amp;quot; java.lang.ClassCastException: class java.lang.Integer cannot be cast to class java.lang.String (java.lang.Integer and java.lang.String are in module java.base of loader &amp;#39;bootstrap&amp;#39;)
	at hawaijar.collections.FloristTest.main(FloristTest.java:10)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The point is that, though we defined our flowers as &lt;em&gt;List&lt;String&gt; flowers&lt;/em&gt;, there’s no way for the compiler to check the &lt;em&gt;unchecked list&lt;/em&gt; in the &lt;em&gt;addFlowers()&lt;/em&gt; because that’s also valid syntax!&lt;/p&gt;
&lt;p&gt;Imagine we’re invoking hundreds of other third-party code and if they’re using &lt;em&gt;unchecked list&lt;/em&gt;, where anything (of Object type) is allowed to add, we’ll have a problem in using those lists returned from them. And worse, finding from where the exception is causing would be a nightmare.&lt;/p&gt;
&lt;p&gt;To help finding where the exception is throwing, just like our &lt;em&gt;Account Proxy&lt;/em&gt; whose sole purpose is to throw an exception when something unintended happen, Java API introduced &lt;em&gt;Collections.checkedXXX&lt;/em&gt; methods where &lt;em&gt;XXX&lt;/em&gt; could be of various collection types. In our case, we will be using &lt;em&gt;Collections.checkedList()&lt;/em&gt; to see how it finds out the right spot of the error.&lt;/p&gt;
&lt;p&gt;Here’s the updated class -&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;Florist&lt;/span&gt; jane &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Florist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; flowers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		flowers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;checkedList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flowers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		jane&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addFlowers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flowers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; flower&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; flowers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flower&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  When running the programs, we’ll see where the problem occurs as shown below -&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Exception in thread &amp;quot;main&amp;quot; java.lang.ClassCastException: Attempt to insert class java.lang.Integer element into collection with element type class java.lang.String
	at java.base/java.util.Collections$CheckedCollection.typeCheck(Collections.java:3097)
	at java.base/java.util.Collections$CheckedCollection.add(Collections.java:3145)
	at hawaijar.collections.Florist.addFlowers(Florist.java:12)
	at hawaijar.collections.FloristTest.main(FloristTest.java:10)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  See those two things -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Exception in thread “main” java.lang.ClassCastException: Attempt to insert class java.lang.Integer element into collection with element type class java.lang.String&lt;/li&gt;
&lt;li&gt;at hawaijar.collections.Florist.addFlowers(Florist.java:12)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;  So, here the &lt;em&gt;Collections.checkedList()&lt;/em&gt; is nothing more than a (run-time) proxy that checks if there’s any unintended operations happen and finds where it happens when such an event occurs. &lt;/p&gt;
&lt;p&gt;  During development time, we can insert that one line &lt;code class=&quot;language-text&quot;&gt;flowers = Collections.checkedList(flowers, String.class);&lt;/code&gt; and once everything is clear of any exceptions, we can remove them before pushing the code to production. It’s mentioned that there’s a cost (slight) involve in using this check method and so it’s better to comment out (or remove) before we move to production.
&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Rambling about Java - Part I]]></title><description><![CDATA[Learning again the most confusing parts of Java, one step at a time - Scope, Package]]></description><link>https://lumen.netlify.com/posts/Java</link><guid isPermaLink="false">https://lumen.netlify.com/posts/Java</guid><pubDate>Mon, 21 Dec 2020 23:46:37 GMT</pubDate><content:encoded>&lt;h2 id=&quot;item-1-package-names-are-like-family-names&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#item-1-package-names-are-like-family-names&quot; aria-label=&quot;item 1 package names are like family names permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ITEM 1: PACKAGE NAMES ARE LIKE FAMILY NAMES&lt;/h2&gt;
&lt;p&gt;  In Java, we arrange (or rather, group) files (source code) based on their common functionality, characteristics, or behaviors. Say, if we have Rose, Lily, Lavenders, etc, we would rather group them in a &lt;strong&gt;flower&lt;/strong&gt; category. Similarly, we will put Dog, Cat, Horse in an &lt;strong&gt;animal&lt;/strong&gt; category.&lt;/p&gt;
&lt;p&gt;  In Java, source files are commonly (and recommended) to organize based on what functionality they’re doing. We have &lt;strong&gt;java.util.function&lt;/strong&gt; package containing all the classes (and interfaces) related to functional interface, for example.&lt;/p&gt;
&lt;p&gt;  Within a package, each class can refer to the other classes without using the package name. It is like calling our family members by their first name say, &lt;strong&gt;John&lt;/strong&gt;. However, if our John is in the public, there might be some other John(s) like &lt;strong&gt;John Wick&lt;/strong&gt;, &lt;strong&gt;John Woo&lt;/strong&gt;, &lt;strong&gt;John carpenter&lt;/strong&gt; etc. and therefore he would be better call out (outside the family) as &lt;strong&gt;John Hawaijar&lt;/strong&gt;, where &lt;strong&gt;Hawaijar&lt;/strong&gt; being the last name (family name)&lt;/p&gt;
&lt;p&gt;  Ironically, if we invite &lt;strong&gt;John Wick&lt;/strong&gt; to a family dinner, we would call him as simply &lt;strong&gt;John&lt;/strong&gt; and not &lt;strong&gt;John Wick&lt;/strong&gt; because we know he is John Wick (&lt;em&gt;Off course, we have to be sure of our facial gesture (and direction) when we call out John as we have our John too in the family!&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;  The way of inviting another person in the family and called by their first name is what the &lt;strong&gt;import&lt;/strong&gt; statement is doing in Java.&lt;/p&gt;
&lt;p&gt;  When we say, &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

  &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt; people &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;John Wick&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;John Doe&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;John Hawaijar&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  We are inviting other classes in our class file and we don’t need to use their fully qualified names.&lt;/p&gt;
&lt;p&gt;  However, without importing the packages, we have to use the fully qualified name of those classes (just like we have to use a person’s full name - first name, last name, in the public to avoid name conflicts) as shown below -&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt; people &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;John Wick&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;John Doe&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;John Hawaijar&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;which-one-is-better&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#which-one-is-better&quot; aria-label=&quot;which one is better permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Which one is better?&lt;/h4&gt;
&lt;p&gt;  In most of the cases, we import packages and used their class names (as in the first example) because that makes the code clean and legible.&lt;/p&gt;
&lt;p&gt; &lt;em&gt;Note&lt;/em&gt;: &lt;em&gt;I want to credit the title of this section to &lt;strong&gt;Simon Roberts&lt;/strong&gt; as I run into this amazing metaphor when he talked about the package topic in his O’Reilly OCP course &lt;a href=&quot;https://learning.oreilly.com/learning-paths/learning-path-oca/9780135944844/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://learning.oreilly.com/learning-paths/learning-path-oca/9780135944844/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Amortized analysis - Dynamic Array]]></title><description><![CDATA[Amortized analysis - Dynamic Array]]></description><link>https://lumen.netlify.com/posts/algorithm-analysis</link><guid isPermaLink="false">https://lumen.netlify.com/posts/algorithm-analysis</guid><pubDate>Sun, 14 Jun 2020 23:46:37 GMT</pubDate><content:encoded>&lt;p&gt;Amortized analysis tries to bring out the average cost of an algorithm that is composed of multiple types of operations. Asymptotic analysis (Big-O) tries to compute the worse case complexity of an algorithm assuming that all operations are same (computational cost) in nature. In some case, an algorithm may composed of different types of operations whose computational speeds are way different (each other or among themselves) and treating them at same par may not accurately render the overall complexity of those algorithms. In those cases, we need to find the average cost (or complexity) of an algorithm using Amortized analysis.&lt;/p&gt;
&lt;p&gt;Let’s say we’ve an algorithm that consists of two types of operations - F (for fast) and S (for slow). Also imagine that S’s operations happen very less frequently than that of F’s operations in the algorithm. On top of that, let’s also assume that the executions of S’s operations help to let more F’s operations happen in the near future. In other words, execution of an S operation makes more F’s operations happen comparative to F operation. In such situation, how are we going to evaluate the overall complexity of an algorithm? That’s where Amortized analysis are being used to solve such problem. &lt;/p&gt;
&lt;p&gt;Let me try to illustrate what I’m trying to emphasize using an example - Dynamic Array&lt;/p&gt;</content:encoded></item><item><title><![CDATA[My mental model for Heap Structure (Part 1)]]></title><description><![CDATA[A heap is a binary tree holding a distinct relation between every parent and their nodes - a parent's value (or key) is always less than (min-heap) or greater than (max-heap) their children ]]></description><link>https://lumen.netlify.com/posts/Heap-data-structure</link><guid isPermaLink="false">https://lumen.netlify.com/posts/Heap-data-structure</guid><pubDate>Thu, 11 Jun 2020 23:46:37 GMT</pubDate><content:encoded>&lt;p&gt;A heap is a binary tree holding a distinct relation between every parent and their nodes - a parent’s value (or key) is always less than (min-heap) or greater than (max-heap) their children.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/heap.jpg&quot; alt=&quot;Stacked, Balanced, Perfection. www.Studio51Film.com&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;tldr&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tldr&quot; aria-label=&quot;tldr permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TLDR&lt;/h4&gt;
&lt;p&gt;Here’s a quick take-away if you don’t want to read the whole thing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A (min)heap data-structure (a.k.a Priority queue) is model as a binary tree where each parent node’s value (or key) is always less than (or equal to) their children.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;They’re conveniently implemented using an array.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;For a parent node at index ‘n’, you’ll find their children at &lt;strong&gt;(2n + 1)&lt;/strong&gt; and &lt;strong&gt;(2n + 2)&lt;/strong&gt; indices.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;For a node at index ‘n’, you’ll find its parent at index &lt;strong&gt;Floor(n - 1)/2&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;For adding an element, we add at the end of the array and &lt;em&gt;bubble- up&lt;/em&gt; the array(beginning).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;For deletion, we replace the first element with the last element and &lt;em&gt;bubble-down&lt;/em&gt; the array(end).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;We shall be explaining on “min-heap” though the same concept can be equivalently applied to “max-heap” as well.&lt;/p&gt;
&lt;p&gt;The term “heap” doesn’t reflect anything, at least to me, on the nature of this tree (read — binary tree) and if you see the photo above, that’s the real-world concept of a heap — a random collection of things placed haphazardly on top of each other. However, the structure that we are discussing here maintains a strict ordering between the items and therefore doesn’t resemble this mental modal whatsoever shape or form.&lt;/p&gt;
&lt;p&gt;On top of this (the difference between the real-concept and abstract-concept), almost all of the discussion on heap structure started right away explaining with Binary Tree structure and immediately implemented using the Array structure. What is missing though is the explanation of why we model it as one structure (binary tree) but implemented with another structure (i.e. Array in this case). In order to understand this concern, we need to dive deeper and look again into the heap property and the algorithms to add and delete items from it.&lt;/p&gt;
&lt;p&gt;Before that, you may ask me — how do I map (or hook) the concept of the heap into my mental model? The way I remember is that heap is nothing but a fancy name of “Priority Queue” — a queue of things where each thing carries a weight called “priority” with it. In such queue, low priority element is served before an element with high priority (the reverse is true for max-heap)&lt;/p&gt;
&lt;p&gt;With that interpretation, let’s jump into the analysis.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Heap property - Every parent node (read as node’s value) must be smaller  than or equal to its children (left &amp;#x26; right child), In other words, every parent node must not be greater than its left and right sub-tree(s).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;How would we satisfy this property using Binary Tree in all operations, notably during addition and deletion of items?&lt;/p&gt;
&lt;p&gt;For binary search tree(BST), as the parent node is always between its left child and right child, insertion and deletion are easily done using a well-defined BST algorithms. &lt;/p&gt;
&lt;p&gt;For heap binary tree, let’s start a thought analysis with a single node P. That is also a heap. No problem. Let’s assume there’re new items M and N coming in, and imagine that they’re smaller than P. On what basis would we decide that which one would be a left or right child? We can’t just decide randomly there. Again, if they are larger than P or if anyone is larger than P, how would we decide the final arrangement without breaking the heap property. We can’t arrange them randomly because it may break the heap property at some insertion or/and deletion operations.&lt;/p&gt;
&lt;p&gt;Nonetheless, there’re ways to implement this (&lt;a href=&quot;https://stackoverflow.com/questions/18241192/implement-heap-using-a-binary-tree&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://stackoverflow.com/questions/18241192/implement-heap-using-a-binary-tree&lt;/a&gt;) arrangement using binary tree itself, but we’ll not go into the details of them (perhaps another article to analyze their complexity with that of Array implementation).&lt;/p&gt;
&lt;p&gt;We will be looking at how Array might solve this issue of arranging parents and their child nodes (rather beautifully yet intuitively) though maintaining the heap property.&lt;/p&gt;
&lt;p&gt;Back to the topic, one key thing that you might already see in Array but not there in Tree is that - Array elements are uniquely ordered from 0, then 1, 2, and so on…And that’s not the case with Tree and therefore we’ve different traversals of a tree structure (Post Order, In order, Pre Order, Breadth-first, Depth-first, etc). And most notably, an array index P, &lt;u&gt;is always less than any subsequent indices that come after it&lt;/u&gt;. Sounds similar to the heap property?&lt;/p&gt;
&lt;p&gt;Let’s draw  binary tree representation of a min-heap structure and we’ll see how it can be mapped to Array easily.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/minheap.jpg&quot; alt=&quot;Heap Binary Tree&quot;&gt;&lt;/p&gt;
&lt;p&gt;The above binary tree can also be drawn as below. Why not? A tree could have wierd branches!😁&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/waterfall.jpg&quot; alt=&quot;A skewed heap binary tree&quot;&gt;&lt;/p&gt;
&lt;p&gt;And imagine, we map each node to an array element as shown below -&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/tree-array-map.jpg&quot; alt=&quot;Binary Tree to Array mapping&quot;&gt;&lt;/p&gt;
&lt;p&gt;Voila! we mapped the binary tree into an array representation. And interesting thing is that an array element can be treated as a parent node and all its children (which is on its right side, not necessarily adjacent one) will always be greater than or equal to its value. We now satisfied the heap property.&lt;/p&gt;
&lt;p&gt;Also, for any array element (read as node in binary heap) at array index “n”, you’ll find its children (left and right child) at &lt;u&gt;(2n + 1) and (2n + 2)&lt;/u&gt; indices respectively. And for a node at array index “n”, its parent would be found at &lt;u&gt;Floor(n - 1)/2&lt;/u&gt; as well.&lt;/p&gt;
&lt;p&gt;Well, you may thinking on how I magically derive those children locations (2n + 1) &amp;#x26; (2n + 2) for a given parent location at index n.&lt;/p&gt;
&lt;p&gt;Here’s the missing point in the earlier definition of Heap. Heap  &lt;strong&gt;is also a complete binary tree&lt;/strong&gt;. All the nodes of the tree are arranged to completely filled all levels (think of as a breadth-first/level-traversal way) except possibly the lowest level which in that case needs to be filled from the left upto a point.&lt;/p&gt;
&lt;p&gt;That’s quite mouthful 😳 . Let’ see what I mean by diagram 😁&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/complete-tree.jpg&quot; alt=&quot;Complete binary tree&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you check the above tree, you’ll observe that the nodes are filling up level-by-level (starting from root) from left to right. So, it’s  filing up with 1 node (level 0), 2 nodes (level 1),
4 nodes (level 2) and next it should 8 maximum nodes (level 3) that we can fill up. So maximum nodes at a level n is 2ⁿ, assuming level starts from 0. Whenever a level has less number of nodes than its maximum and if we start the filling the nodes from the left, that’s what the complete binary tree is referring to (as you can see in the diagram).&lt;/p&gt;
&lt;p&gt;However, the diagram below, though it may satisfy the heap property is not a complete binary tree as we have empty slots on the left (at level 3). &lt;u&gt;This binary heap cannot be mapped to an array using the formula (2n + 1) and (2n + 2)&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/non-complete-tree.jpg&quot; alt=&quot;Non-complete Binary&quot;&gt;&lt;/p&gt;
&lt;p&gt;So, to cut the story short, here’s the complete definition of binary heap, rephrase again :
A heap is a &lt;strong&gt;complete binary tree&lt;/strong&gt; holding a distinct relation between every parent and their nodes - a parent’s value (or key) is always less than (min-heap) or greater than (max-heap) their children. Each node of the tree can be mapped to an array index using the formula - &lt;u&gt;A parent at index n, will have its children at indices (2n + 1) and (2n + 2) respectively.&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;In other words, only when the binary heap is almost complete, then will we able to lay down the children locations in an array, using the above formula.&lt;/p&gt;
&lt;p&gt;Finally, coming to the addition and deletion of items in Binary heap (refer TLDR above), the algorithm demands to insert an element at the end or beginning of an array and that is constant time, O(1) complexity in an array, which is not so in a binary tree. We’ll understand this when we go through the implementation part.&lt;/p&gt;
&lt;p&gt;This explains the reason why we describe Heap structure as a Binary Tree but usually implement rather as an Array structure.&lt;/p&gt;
&lt;p&gt;I know this topic is on the longer side. We would also like to discuss the a) &lt;em&gt;complexity of heap structure&lt;/em&gt;, b) &lt;em&gt;implementation (of min-heap) in Javascript&lt;/em&gt; and also c) &lt;em&gt;two primary applications of heap data structure&lt;/em&gt; - 1) &lt;strong&gt;Merging K-Sorted arrays&lt;/strong&gt; and 2) &lt;strong&gt;Djikstra’s shortest path algorithm&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We shall discuss these remaining topics next time. So, stay tuned!&lt;/p&gt;</content:encoded></item></channel></rss>